/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import handlers.Handler;
import messages.*;

import java.net.*;
import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class MainBank {

    private ServerSocket ss;
    private Socket s;
    private PrintWriter opt;
    private InputStreamReader ipt;
    private BufferedReader bf;

    private final Map<Short, Handler<? extends Message>> handlers = new HashMap();

    public MainBank(){
        messageHandler(DepositMessage.MSG_CODE, this::depositMessage);
        messageHandler(GetBalanceMessage.MSG_CODE, this::getBalanceMessage);
        messageHandler(NewAccountMessage.MSG_CODE, this::newAccountMessage);
        messageHandler(WithdrawMessage.MSG_CODE, this::withdrawMessage);

    }

    private void withdrawMessage(WithdrawMessage msg) {
        System.out.println(msg);
    }

    private void newAccountMessage(NewAccountMessage msg) {
        System.out.println(msg);
    }

    private void getBalanceMessage(GetBalanceMessage msg) {
        System.out.println(msg);
    }

    private void depositMessage(DepositMessage msg) {
        System.out.println(msg);
    }

    private class ATMHandler extends Thread {

        private final Socket s;

        public ATMHandler(Socket socket) throws IOException {
            this.s = socket;
        }

        public void run() {
            try {
                InputStream is = s.getInputStream();
                ObjectInputStream objInput = new ObjectInputStream(is);

                Message m = (Message) objInput.readObject();

                if(handlers.containsKey(m.getId())) {
                    Handler h = handlers.get(m.getId());
                    new Thread(() -> {
                        try {
                            h.handle(m);
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }).start();
                }
                else {
                    System.out.println(m);
                }
            } catch (IOException | ClassNotFoundException e ) {
                e.printStackTrace();
            }
        }
    }

    public void startRunning(){
        try{
            ss = new ServerSocket(3000);
            while (true) {
                try{
                    try {
                        Socket atmSocket = ss.accept();
                        ATMHandler ph = new ATMHandler(atmSocket);
                        ph.start();
                    }
                    catch (SocketTimeoutException ignored) {
                    }
                }catch (EOFException e) {
                    System.out.println("\nServer: Lost Connection. ");
                }
            }
        }catch(IOException e){
            e.printStackTrace();
        }
    }

    protected final <V extends Message> void messageHandler(short msgId, Handler<V> inHandler)  {
        handlers.putIfAbsent(msgId, inHandler);
    }

    public static void main(String[] args) throws IOException {
        MainBank mb = new MainBank();
        mb.startRunning();
    }


}
